import express from "express";
import mysql from "mysql2";
import dotenv from "dotenv";
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";
import cors from "cors";

dotenv.config();
console.log("üîë JWT_SECRET:", process.env.JWT_SECRET);
const app = express();
app.use(express.json());
app.use(cors());

// K·∫øt n·ªëi MySQL
const db = mysql.createConnection({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME,
  port: process.env.DB_PORT,
});

db.connect((err) => {
  if (err) {
    console.error("‚ùå MySQL Connection Error:", err);
  } else {
    console.log("‚úÖ Connected to MySQL Database!");
  }
});

/// API ƒëƒÉng k√Ω
app.post("/api/register", async (req, res) => {
  const { email, password, name } = req.body;

  try {
    // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i
    db.query("SELECT * FROM users WHERE email = ?", [email], async (err, results) => {
      if (err) {
        console.error("L·ªói truy v·∫•n:", err);
        return res.status(500).json({ error: "L·ªói server" });
      }
      console.log("K·∫øt qu·∫£ truy v·∫•n:", results);
      if (results.length > 0) return res.status(400).json({ error: "Email ƒë√£ t·ªìn t·∫°i!" });

      // N·∫øu email ch∆∞a t·ªìn t·∫°i, ti·∫øp t·ª•c ƒëƒÉng k√Ω
      const hashedPassword = await bcrypt.hash(password, 10);

      db.query(
        "INSERT INTO users (email, password, name) VALUES (?, ?, ?)",
        [email, hashedPassword, name],
        (err, result) => {
          if (err) return res.status(500).json({ error: "L·ªói khi ƒëƒÉng k√Ω" });

          // T·∫°o token
          const token = jwt.sign({ id: result.insertId, email }, process.env.JWT_SECRET, {
            expiresIn: "1h",
          });

          res.json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng!", token });
        }
      );
    });
  } catch (error) {
    res.status(500).json({ error: "L·ªói server" });
  }
});

// ƒêƒÉng nh·∫≠p
app.post("/api/login", (req, res) => {
  const { email, password } = req.body;

  db.query("SELECT * FROM users WHERE email = ?", [email], async (err, results) => {
    if (err) return res.status(500).json({ error: "L·ªói server" });
    if (results.length === 0) return res.status(401).json({ error: "Sai email ho·∫∑c m·∫≠t kh·∫©u" });

    const user = results[0];
    const isMatch = await bcrypt.compare(password, user.password);

    if (!isMatch) return res.status(401).json({ error: "Sai email ho·∫∑c m·∫≠t kh·∫©u" });

    const token = jwt.sign({ id: user.id, email: user.email }, process.env.JWT_SECRET, {
      expiresIn: "1h",
    });

    res.json({
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!",
      token,
      user: {
        id: user.id,
        email: user.email,
        name: user.name || "Guest", 
        image: user.image || null, 
      },
    });
  });
});

// API c·∫≠p nh·∫≠t avatar
app.post("/api/update-avatar", (req, res) => {
  const { user_id, image } = req.body;

  if (!user_id || !image) {
    return res.status(400).json({ error: "Thi·∫øu user_id ho·∫∑c link ·∫£nh" });
  }

  const sql = "UPDATE users SET image = ? WHERE id = ?";

  db.query(sql, [image, user_id], (err, result) => {
    if (err) {
      console.error("L·ªói khi c·∫≠p nh·∫≠t avatar:", err);
      return res.status(500).json({ error: "L·ªói khi c·∫≠p nh·∫≠t avatar" });
    }

    res.json({ message: "C·∫≠p nh·∫≠t avatar th√†nh c√¥ng" });
  });
});

// API l·∫•y danh s√°ch trip
app.get("/api/trips", (req, res) => {
  const { category, search } = req.query;

  let sql = "SELECT * FROM trip WHERE 1=1";
  const params = [];

  if (category && category !== "all") {
    sql += " AND category = ?";
    params.push(category);
  }

  if (search) {
    sql += " AND name LIKE ?";
    params.push(`%${search}%`);
  }

  db.query(sql, params, (err, results) => {
    if (err) {
      console.error("L·ªói khi l·∫•y danh s√°ch trips:", err);
      return res.status(500).json({ error: "L·ªói khi l·∫•y danh s√°ch trips" });
    }
    res.json(results);
  });
});

// API l·∫•y danh s√°ch trip theo id
app.get("/api/trip/:id", (req, res) => {
  const { id } = req.params;

  db.query("SELECT * FROM trip WHERE id = ?", [id], (err, result) => {
    if (err) {
      console.error("MySQL Error:", err);
      return res.status(500).json({ error: "Failed to fetch trip data" });
    }
    if (result.length === 0) {
      return res.status(404).json({ error: "Trip not found" });
    }
    res.json(result[0]);
  });
});

// API ƒë·∫∑t chuy·∫øn ƒëi
app.post("/api/book", (req, res) => {
  const { user_id, trip_id } = req.body;

  if (!user_id || !trip_id) {
      return res.status(400).json({ error: "Thi·∫øu user_id ho·∫∑c trip_id" });
  }

  const sql = "INSERT INTO users_trip (user_id, trip_id, status) VALUES (?, ?, 'booked')";

  db.query(sql, [user_id, trip_id], (err, result) => {
      if (err) {
          console.error("L·ªói khi book trip:", err);
          return res.status(500).json({ error: "L·ªói khi book trip" });
      }
      res.json({ message: "ƒê·∫∑t chuy·∫øn ƒëi th√†nh c√¥ng", booking_id: result.insertId });
  });
});

// API h·ªßy chuy·∫øn ƒëi
app.post("/api/cancel", (req, res) => {
  const { user_id, trip_id } = req.body;

  if (!user_id || !trip_id) {
      return res.status(400).json({ error: "Thi·∫øu user_id ho·∫∑c trip_id" });
  }

  const sql = "UPDATE users_trip SET status = 'cancelled' WHERE user_id = ? AND trip_id = ?";

  db.query(sql, [user_id, trip_id], (err, result) => {
      if (err) {
          console.error("L·ªói khi h·ªßy trip:", err);
          return res.status(500).json({ error: "L·ªói khi h·ªßy trip" });
      }
      res.json({ message: "H·ªßy chuy·∫øn ƒëi th√†nh c√¥ng" });
  });
});

// API l·∫•y status danh s√°ch c√°c chuy·∫øn ƒëi ƒë√£ ƒë·∫∑t
app.get("/api/book-status/:trip_id", (req, res) => {
  const { trip_id } = req.params;
  const { user_id } = req.query;

  if (!user_id || !trip_id) {
    return res.status(400).json({ error: "Thi·∫øu user_id ho·∫∑c trip_id" });
  }

  const sql = `
    SELECT status FROM users_trip
    WHERE user_id = ? AND trip_id = ? AND status = 'booked'
  `;

  db.query(sql, [user_id, trip_id], (err, result) => {
    if (err) {
      console.error("L·ªói khi ki·ªÉm tra tr·∫°ng th√°i trip:", err);
      return res.status(500).json({ error: "L·ªói khi ki·ªÉm tra tr·∫°ng th√°i trip" });
    }

    res.json({ isBooked: result.length > 0 });
  });
});

// API l·∫•y danh s√°ch c√°c chuy·∫øn ƒëi ƒë√£ ƒë·∫∑t
app.get("/api/booked-trips/:user_id", (req, res) => {
  const { user_id } = req.params;

  if (!user_id) {
    return res.status(400).json({ error: "Thi·∫øu user_id" });
  }

  const sql = `
    SELECT t.id, t.name, t.image, t.location, t.price, t.duration, t.rating
    FROM trip t
    INNER JOIN users_trip ut ON t.id = ut.trip_id
    WHERE ut.user_id = ? AND ut.status = 'booked'
  `;

  db.query(sql, [user_id], (err, result) => {
    if (err) {
      console.error("L·ªói khi l·∫•y danh s√°ch booked trips:", err);
      return res.status(500).json({ error: "L·ªói khi l·∫•y danh s√°ch booked trips" });
    }

    res.json(result);
  });
});

// API th√™m b√†i vi·∫øt
app.post("/api/posts", (req, res) => {
  const { user_id, content, image_url } = req.body;
  if (!content) return res.status(400).json({ error: "N·ªôi dung kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" });

  const sql = "INSERT INTO posts (user_id, content, image_url) VALUES (?, ?, ?)";
  db.query(sql, [user_id, content, image_url || null], (err, result) => {
    if (err) {
      console.error("L·ªói th√™m b√†i vi·∫øt:", err);
      return res.status(500).json({ error: "L·ªói th√™m b√†i vi·∫øt" });
    }
    res.json({ message: "ƒê√£ ƒëƒÉng b√†i th√†nh c√¥ng!", postId: result.insertId });
  });
});

// API l·∫•y danh s√°ch b√†i vi·∫øt
app.get("/api/posts", (req, res) => {
  const sql = `
    SELECT posts.*, users.name, users.image AS user_image,
    (SELECT COUNT(*) FROM likes WHERE likes.post_id = posts.id) AS likes_count,
    (SELECT COUNT(*) FROM comments WHERE comments.post_id = posts.id) AS comments_count
    FROM posts
    JOIN users ON posts.user_id = users.id
    ORDER BY created_at DESC
  `;
  db.query(sql, (err, result) => {
    if (err) {
      console.error("L·ªói l·∫•y danh s√°ch b√†i vi·∫øt:", err);
      return res.status(500).json({ error: "L·ªói l·∫•y danh s√°ch b√†i vi·∫øt" });
    }
    res.json(result);
  });
});

// API th√™m comment
app.post("/api/comments", (req, res) => {
  const { post_id, user_id, content } = req.body;
  if (!content) return res.status(400).json({ error: "N·ªôi dung kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" });

  const sql = "INSERT INTO comments (post_id, user_id, content) VALUES (?, ?, ?)";
  db.query(sql, [post_id, user_id, content], (err, result) => {
    if (err) {
      console.error("L·ªói th√™m comment:", err);
      return res.status(500).json({ error: "L·ªói th√™m comment" });
    }

    // L·∫•y th√¥ng tin comment v·ª´a th√™m
    const commentId = result.insertId;
    const fetchSql = `
      SELECT comments.*, users.name 
      FROM comments 
      JOIN users ON comments.user_id = users.id 
      WHERE comments.id = ?
    `;
    db.query(fetchSql, [commentId], (fetchErr, fetchResult) => {
      if (fetchErr) {
        console.error("L·ªói l·∫•y comment v·ª´a th√™m:", fetchErr);
        return res.status(500).json({ error: "L·ªói l·∫•y comment v·ª´a th√™m" });
      }
      res.json({ message: "ƒê√£ th√™m comment th√†nh c√¥ng!", comment: fetchResult[0] });
    });
  });
});

// API l·∫•y danh s√°ch comment
app.get("/api/comments/:post_id", (req, res) => {
  const { post_id } = req.params;
  const sql = `
    SELECT comments.*, users.name 
    FROM comments 
    JOIN users ON comments.user_id = users.id 
    WHERE comments.post_id = ? 
    ORDER BY created_at DESC
  `;
  db.query(sql, [post_id], (err, result) => {
    if (err) {
      console.error("L·ªói l·∫•y danh s√°ch comment:", err);
      return res.status(500).json({ error: "L·ªói l·∫•y danh s√°ch comment" });
    }
    res.json(result);
  });
});

// API like b√†i vi·∫øt 
app.post("/api/likes", (req, res) => {
  const { post_id, user_id } = req.body;

  // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ like b√†i vi·∫øt ch∆∞a
  const checkSql = "SELECT * FROM likes WHERE post_id = ? AND user_id = ?";
  db.query(checkSql, [post_id, user_id], (err, results) => {
    if (err) return res.status(500).json({ error: "L·ªói ki·ªÉm tra like" });

    if (results.length > 0) {
      return res.status(400).json({ error: "B·∫°n ƒë√£ like b√†i vi·∫øt n√†y r·ªìi!" });
    }

    // Th√™m like v√†o b·∫£ng likes
    const insertSql = "INSERT INTO likes (post_id, user_id) VALUES (?, ?)";
    db.query(insertSql, [post_id, user_id], (err, result) => {
      if (err) return res.status(500).json({ error: "L·ªói th√≠ch b√†i vi·∫øt" });

      // C·∫≠p nh·∫≠t likes_count trong b·∫£ng posts
      const updateSql = "UPDATE posts SET likes_count = likes_count + 1 WHERE id = ?";
      db.query(updateSql, [post_id], (err, updateResult) => {
        if (err) return res.status(500).json({ error: "L·ªói c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng like" });

        // Tr·∫£ v·ªÅ s·ªë l∆∞·ª£ng like m·ªõi
        const countSql = "SELECT likes_count FROM posts WHERE id = ?";
        db.query(countSql, [post_id], (err, countResult) => {
          if (err) return res.status(500).json({ error: "L·ªói l·∫•y s·ªë l∆∞·ª£ng like" });
          res.json({ message: "ƒê√£ like b√†i vi·∫øt!", likes_count: countResult[0].likes_count });
        });
      });
    });
  });
});


// API b·ªè like b√†i vi·∫øt
app.delete("/api/likes/:post_id/:user_id", (req, res) => {
  const { post_id, user_id } = req.params;

  // X√≥a like kh·ªèi b·∫£ng likes
  const deleteSql = "DELETE FROM likes WHERE post_id = ? AND user_id = ?";
  db.query(deleteSql, [post_id, user_id], (err, result) => {
    if (err) return res.status(500).json({ error: "L·ªói b·ªè like" });

    // C·∫≠p nh·∫≠t likes_count trong b·∫£ng posts
    const updateSql = "UPDATE posts SET likes_count = likes_count - 1 WHERE id = ?";
    db.query(updateSql, [post_id], (err, updateResult) => {
      if (err) return res.status(500).json({ error: "L·ªói c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng like" });

      // Tr·∫£ v·ªÅ s·ªë l∆∞·ª£ng like m·ªõi
      const countSql = "SELECT likes_count FROM posts WHERE id = ?";
      db.query(countSql, [post_id], (err, countResult) => {
        if (err) return res.status(500).json({ error: "L·ªói l·∫•y s·ªë l∆∞·ª£ng like" });
        res.json({ message: "ƒê√£ b·ªè like b√†i vi·∫øt!", likes_count: countResult[0].likes_count });
      });
    });
  });
});

// API x√≥a b√†i ƒëƒÉng
app.delete("/api/posts/:post_id/:user_id", (req, res) => {
  const { post_id, user_id } = req.params;

  // Ki·ªÉm tra xem b√†i ƒëƒÉng c√≥ thu·ªôc v·ªÅ user kh√¥ng
  const checkSql = "SELECT * FROM posts WHERE id = ? AND user_id = ?";
  db.query(checkSql, [post_id, user_id], (err, results) => {
    if (err) return res.status(500).json({ error: "L·ªói ki·ªÉm tra quy·ªÅn x√≥a b√†i ƒëƒÉng" });

    if (results.length === 0) {
      return res.status(403).json({ error: "B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a b√†i ƒëƒÉng n√†y!" });
    }

    // X√≥a b√†i ƒëƒÉng
    const deleteSql = "DELETE FROM posts WHERE id = ?";
    db.query(deleteSql, [post_id], (err, result) => {
      if (err) return res.status(500).json({ error: "L·ªói x√≥a b√†i ƒëƒÉng" });

      res.json({ message: "ƒê√£ x√≥a b√†i ƒëƒÉng th√†nh c√¥ng!" });
    });
  });
});

// Ch·∫°y server
const PORT = process.env.PORT || 8000;
app.listen(PORT, "0.0.0.0" , () => console.log(`Server ƒëang ch·∫°y t·∫°i http://127.0.0.1:${PORT}`));

